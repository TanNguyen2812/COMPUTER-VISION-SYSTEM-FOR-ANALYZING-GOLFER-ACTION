# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
from Event_Detector_model import Event_Detector
from test_video_MP import extract_keypoints
import torch
import os
import torch.nn.functional as F
import cv2, imutils
import time
import numpy as np

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1605, 788)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(1140, 10, 401, 101))
        self.groupBox_3.setObjectName("groupBox_3")
        self.start_record_btn = QtWidgets.QPushButton(self.groupBox_3)
        self.start_record_btn.setGeometry(QtCore.QRect(10, 30, 171, 61))
        self.start_record_btn.setObjectName("start_record_btn")
        self.stop_record_btn = QtWidgets.QPushButton(self.groupBox_3)
        self.stop_record_btn.setGeometry(QtCore.QRect(240, 30, 151, 61))
        self.stop_record_btn.setObjectName("stop_record_btn")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(1140, 120, 451, 331))
        self.groupBox_2.setObjectName("groupBox_2")
        self.layoutWidget = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget.setGeometry(QtCore.QRect(220, 80, 213, 231))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Impact_btn = QtWidgets.QPushButton(self.layoutWidget)
        self.Impact_btn.setObjectName("Impact_btn")
        self.verticalLayout_2.addWidget(self.Impact_btn)
        self.Mid_downswing_btn = QtWidgets.QPushButton(self.layoutWidget)
        self.Mid_downswing_btn.setObjectName("Mid_downswing_btn")
        self.verticalLayout_2.addWidget(self.Mid_downswing_btn)
        self.Mid_follow_through_btn = QtWidgets.QPushButton(self.layoutWidget)
        self.Mid_follow_through_btn.setObjectName("Mid_follow_through_btn")
        self.verticalLayout_2.addWidget(self.Mid_follow_through_btn)
        self.Finish_btn = QtWidgets.QPushButton(self.layoutWidget)
        self.Finish_btn.setObjectName("Finish_btn")
        self.verticalLayout_2.addWidget(self.Finish_btn)
        self.layoutWidget1 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget1.setGeometry(QtCore.QRect(20, 80, 191, 231))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Adress_btn = QtWidgets.QPushButton(self.layoutWidget1)
        self.Adress_btn.setObjectName("Adress_btn")
        self.verticalLayout.addWidget(self.Adress_btn)
        self.Toe_up_btn = QtWidgets.QPushButton(self.layoutWidget1)
        self.Toe_up_btn.setObjectName("Toe_up_btn")
        self.verticalLayout.addWidget(self.Toe_up_btn)
        self.Mid_backswing_btn = QtWidgets.QPushButton(self.layoutWidget1)
        self.Mid_backswing_btn.setObjectName("Mid_backswing_btn")
        self.verticalLayout.addWidget(self.Mid_backswing_btn)
        self.Top_btn = QtWidgets.QPushButton(self.layoutWidget1)
        self.Top_btn.setObjectName("Top_btn")
        self.verticalLayout.addWidget(self.Top_btn)
        self.Frame_radioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.Frame_radioButton.setGeometry(QtCore.QRect(40, 30, 110, 24))
        self.Frame_radioButton.setObjectName("Frame_radioButton")
        self.Frames_radioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.Frames_radioButton.setGeometry(QtCore.QRect(160, 30, 110, 24))
        self.Frames_radioButton.setObjectName("Frames_radioButton")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_2)
        self.checkBox.setGeometry(QtCore.QRect(290, 30, 91, 24))
        self.checkBox.setObjectName("checkBox")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(1110, 10, 16, 721))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.Im_show = QtWidgets.QLabel(self.centralwidget)
        self.Im_show.setGeometry(QtCore.QRect(30, 10, 1061, 681))
        self.Im_show.setText("")
        self.Im_show.setObjectName("Im_show")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(1140, 460, 451, 131))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(20, 30, 71, 21))
        self.label.setTextFormat(QtCore.Qt.MarkdownText)
        self.label.setObjectName("label")
        self.stop_slow_btn = QtWidgets.QPushButton(self.groupBox)
        self.stop_slow_btn.setGeometry(QtCore.QRect(270, 60, 151, 61))
        self.stop_slow_btn.setObjectName("stop_slow_btn")
        self.start_slow_btn = QtWidgets.QPushButton(self.groupBox)
        self.start_slow_btn.setGeometry(QtCore.QRect(20, 60, 171, 61))
        self.start_slow_btn.setObjectName("start_slow_btn")
        self.time_slow = QtWidgets.QLineEdit(self.groupBox)
        self.time_slow.setGeometry(QtCore.QRect(90, 30, 113, 26))
        self.time_slow.setObjectName("time_slow")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1605, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.model = Event_Detector(lstm_layers=2,
                                    lstm_hidden=256,
                                    bidirectional=True,
                                    dropout=True)
        self.model.load_state_dict(torch.load('event_detector_5000.pth')['model_state_dict'])
        self.model.eval()
        self.model.cuda()
        self.vid = 'video_data/453.mp4'
        self.frames_check = False
        self.events = None
        self.th = {}
        self.time_slowmotion = 200
        self.check_address = False
        self.check_toe_up = False
        self.check_mid_backswing = False
        self.check_top = False
        self.check_downswing = False
        self.check_impact = False
        self.check_mid_flow = False
        self.check_finish = False

        self.one_frame_show = True

        self.Adress_btn.clicked.connect(self.show_address)
        self.Toe_up_btn.clicked.connect(self.show_toe_up)
        self.Mid_backswing_btn.clicked.connect(self.show_mid_backswing)
        self.Top_btn.clicked.connect(self.show_top)
        self.Mid_downswing_btn.clicked.connect(self.show_mid_downswing)
        self.Impact_btn.clicked.connect(self.show_impact)
        self.Mid_follow_through_btn.clicked.connect(self.show_follow)
        self.Finish_btn.clicked.connect(self.show_finish)

        self.Frame_radioButton.toggled.connect(self.check_one_frame_mode)
        self.Frames_radioButton.toggled.connect(self.check_frames_mode)



        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def extract_frame(self, video_path):
        dname = 'temp'
        os.makedirs(dname, exist_ok=True)
        frame_tmpl = os.path.join(dname, 'img_{:05d}.jpg')
        vid = cv2.VideoCapture(video_path)
        frame_paths = []
        flag, frame = vid.read()
        cnt = 0
        while flag:
            frame_path = frame_tmpl.format(cnt + 1)
            frame_paths.append(frame_path)

            cv2.imwrite(frame_path, frame)
            cnt += 1
            flag, frame = vid.read()

        return frame_paths

    def eval_model(self, vid, seq_length):
        keypoints = extract_keypoints(vid)
        keypoints = torch.from_numpy(keypoints).float()
        batch = 0
        while batch * seq_length < keypoints.shape[1]:
            if (batch + 1) * seq_length > keypoints.shape[1]:
                image_batch = keypoints[:, batch * seq_length:, :, :]
            else:
                image_batch = keypoints[:, batch * seq_length:(batch + 1) * seq_length, :, :]
            logits = self.model(image_batch.cuda())
            if batch == 0:
                probs = F.softmax(logits.data, dim=1).cpu().numpy()
            else:
                probs = np.append(probs, F.softmax(logits.data, dim=1).cpu().numpy(), 0)
            batch += 1

        events = np.argmax(probs, axis=0)[:-1]
        confidence = []
        for i, e in enumerate(events):
            confidence.append(probs[e, i])
        print('Confidence: {}'.format([np.round(c, 3) for c in confidence]))
        return events, confidence

        # def play_videos(self, notePath):
        #     print(notePath)
        #     if notePath == 'Toe_up_btn':
        #         self.show_toe_up()
        #     if notePath == 'Mid_backswing_btn':
        #         self.show_mid_backswing()
        #
        # def run_threads(self):
        #     self.th[self.mw.sender().objectName()] = Thread(target=self.play_videos, args=(self.mw.sender().objectName(),))
        #     self.th[self.mw.sender().objectName()].start()

    def check_one_frame_mode(self, status):
        if status:
            self.one_frame_show = True

    def check_frames_mode(self, status):
        if status:
            self.one_frame_show = False

    def show_address(self):
        self.check_address = True
        self.check_toe_up = False
        self.check_mid_backswing = False
        self.check_top = False
        self.check_downswing = False
        self.check_impact = False
        self.check_mid_flow = False
        self.check_finish = False

        if self.events is None:
            self.events, self.confidence = self.eval_model(self.vid, 64)
        self.frames = self.extract_frame(self.vid)
        # print('events', self.events)
        # print('confidence', self.confidence)
        frame_show = cv2.imread(self.frames[self.events[0]])
        while True:
            self.setPhoto(frame_show)
            cv2.waitKey(self.time_slowmotion)
            if self.check_address == False:
                break

    def show_toe_up(self):
        if self.events is None:
            self.events, self.confidence = self.eval_model(self.vid, 64)
            self.frames = self.extract_frame(self.vid)
            print(self.events)
        # frames = self.extract_frame(self.vid)
        # print('events', self.events)
        # print('confidence', self.confidence)
        # frame_show = cv2.imread(frames[self.events[1]])
        # self.setPhoto(frame_show)
        self.check_address = False
        self.check_toe_up = True
        self.check_mid_backswing = False
        self.check_top = False
        self.check_downswing = False
        self.check_impact = False
        self.check_mid_flow = False
        self.check_finish = False

        while True:
            if self.one_frame_show:
                img_show = cv2.imread(self.frames[self.events[1]])
                self.setPhoto(img_show)
                cv2.waitKey(self.time_slowmotion)
                if self.check_toe_up == False:
                    break
            else:
                for i in range(self.events[0], self.events[1]):
                    img_show = cv2.imread(self.frames[i])
                    self.setPhoto(img_show)
                    cv2.waitKey(self.time_slowmotion)
                    if self.check_toe_up == False:
                        break

    def show_mid_backswing(self):
        if self.events is None:
            self.events, self.confidence = self.eval_model(self.vid, 64)
            self.frames = self.extract_frame(self.vid)
            print(self.events)
        # frames = self.extract_frame(self.vid)
        # print('events', self.events)
        # print('confidence', self.confidence)
        # frame_show = cv2.imread(frames[self.events[1]])
        # self.setPhoto(frame_show)
        self.check_address = False
        self.check_toe_up = False
        self.check_mid_backswing = True
        self.check_top = False
        self.check_downswing = False
        self.check_impact = False
        self.check_mid_flow = False
        self.check_finish = False
        while True:
            if self.one_frame_show:
                img_show = cv2.imread(self.frames[self.events[2]])
                self.setPhoto(img_show)
                cv2.waitKey(self.time_slowmotion)
                if self.check_toe_up == False:
                    break
            else:
                for i in range(self.events[1], self.events[2]):
                    img_show = cv2.imread(self.frames[i])
                    self.setPhoto(img_show)
                    cv2.waitKey(self.time_slowmotion)
                    if self.check_mid_backswing == False:
                        break

    def show_top(self):
        if self.events is None:
            self.events, self.confidence = self.eval_model(self.vid, 64)
            self.frames = self.extract_frame(self.vid)
            print(self.events)
        # frames = self.extract_frame(self.vid)
        # print('events', self.events)
        # print('confidence', self.confidence)
        # frame_show = cv2.imread(frames[self.events[1]])
        # self.setPhoto(frame_show)
        self.check_address = False
        self.check_toe_up = False
        self.check_mid_backswing = False
        self.check_top = True
        self.check_downswing = False
        self.check_impact = False
        self.check_mid_flow = False
        self.check_finish = False
        while True:
            if self.one_frame_show:
                img_show = cv2.imread(self.frames[self.events[3]])
                self.setPhoto(img_show)
                cv2.waitKey(self.time_slowmotion)
                if self.check_top == False:
                    break
            else:
                for i in range(self.events[2], self.events[3]):
                    img_show = cv2.imread(self.frames[i])
                    self.setPhoto(img_show)
                    cv2.waitKey(self.time_slowmotion)
                    if self.check_top == False:
                        break

    def show_mid_downswing(self):
        if self.events is None:
            self.events, self.confidence = self.eval_model(self.vid, 64)
            self.frames = self.extract_frame(self.vid)
            print(self.events)
        # frames = self.extract_frame(self.vid)
        # print('events', self.events)
        # print('confidence', self.confidence)
        # frame_show = cv2.imread(frames[self.events[1]])
        # self.setPhoto(frame_show)
        self.check_address = False
        self.check_toe_up = False
        self.check_mid_backswing = False
        self.check_top = False
        self.check_downswing = True
        self.check_impact = False
        self.check_mid_flow = False
        self.check_finish = False
        while True:
            if self.one_frame_show:
                img_show = cv2.imread(self.frames[self.events[3]])
                self.setPhoto(img_show)
                cv2.waitKey(self.time_slowmotion)
                if self.check_toe_up == False:
                    break
            else:
                for i in range(self.events[3], self.events[4]):
                    img_show = cv2.imread(self.frames[i])
                    self.setPhoto(img_show)
                    cv2.waitKey(self.time_slowmotion)
                    if self.check_downswing == False:
                        break

    def show_impact(self):

        if self.events is None:
            self.events, self.confidence = self.eval_model(self.vid, 64)
            self.frames = self.extract_frame(self.vid)
            print(self.events)
        # frames = self.extract_frame(self.vid)
        # print('events', self.events)
        # print('confidence', self.confidence)
        # frame_show = cv2.imread(frames[self.events[1]])
        # self.setPhoto(frame_show)
        self.check_address = False
        self.check_toe_up = False
        self.check_mid_backswing = False
        self.check_top = False
        self.check_downswing = False
        self.check_impact = True
        self.check_mid_flow = False
        self.check_finish = False
        while True:
            if self.one_frame_show:
                img_show = cv2.imread(self.frames[self.events[5]])
                self.setPhoto(img_show)
                cv2.waitKey(self.time_slowmotion)
                if self.check_toe_up == False:
                    break
            else:
                for i in range(self.events[4], self.events[5]):
                    img_show = cv2.imread(self.frames[i])
                    self.setPhoto(img_show)
                    cv2.waitKey(self.time_slowmotion)
                    if self.check_impact == False:
                        break

    def show_follow(self):

        if self.events is None:
            self.events, self.confidence = self.eval_model(self.vid, 64)
            self.frames = self.extract_frame(self.vid)
            print(self.events)
        self.check_address = False
        self.check_toe_up = False
        self.check_mid_backswing = False
        self.check_top = False
        self.check_downswing = False
        self.check_impact = False
        self.check_mid_flow = True
        self.check_finish = False
        while True:
            if self.one_frame_show:
                img_show = cv2.imread(self.frames[self.events[6]])
                self.setPhoto(img_show)
                cv2.waitKey(self.time_slowmotion)
                if self.check_toe_up == False:
                    break
            else:
                for i in range(self.events[5], self.events[6]):
                    img_show = cv2.imread(self.frames[i])
                    self.setPhoto(img_show)
                    cv2.waitKey(self.time_slowmotion)
                    if self.check_mid_flow == False:
                        break

    def show_finish(self):
        if self.events is None:
            self.events, self.confidence = self.eval_model(self.vid, 64)
            self.frames = self.extract_frame(self.vid)
            print(self.events)
        self.check_address = False
        self.check_toe_up = False
        self.check_mid_backswing = False
        self.check_top = False
        self.check_downswing = False
        self.check_impact = False
        self.check_mid_flow = False
        self.check_finish = True
        while True:
            if self.one_frame_show:
                img_show = cv2.imread(self.frames[self.events[7]])
                self.setPhoto(img_show)
                cv2.waitKey(self.time_slowmotion)
                if self.check_toe_up == False:
                    break
            else:
                for i in range(self.events[6], self.events[7]):
                    img_show = cv2.imread(self.frames[i])
                    self.setPhoto(img_show)
                    cv2.waitKey(self.time_slowmotion)
                    if self.check_finish == False:
                        break

    def setPhoto(self, image):
        """ This function will take image input and resize it
            only for display purpose and convert it to QImage
            to set at the label.
        """
        self.tmp = image
        image = imutils.resize(image, height=640)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.Im_show.setPixmap(QtGui.QPixmap.fromImage(image))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Record"))
        self.start_record_btn.setText(_translate("MainWindow", "Start"))
        self.stop_record_btn.setText(_translate("MainWindow", "Stop"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Detect Event"))
        self.Impact_btn.setText(_translate("MainWindow", "Impact"))
        self.Mid_downswing_btn.setText(_translate("MainWindow", "Mid-downswing"))
        self.Mid_follow_through_btn.setText(_translate("MainWindow", "Mid-follow-through"))
        self.Finish_btn.setText(_translate("MainWindow", "Finish"))
        self.Adress_btn.setText(_translate("MainWindow", "Adress"))
        self.Toe_up_btn.setText(_translate("MainWindow", "Toe-up"))
        self.Mid_backswing_btn.setText(_translate("MainWindow", "Mid-backswing"))
        self.Top_btn.setText(_translate("MainWindow", "Top"))
        self.Frame_radioButton.setText(_translate("MainWindow", "Frame"))
        self.Frames_radioButton.setText(_translate("MainWindow", "Frames"))
        self.checkBox.setText(_translate("MainWindow", "skeleton"))
        self.groupBox.setTitle(_translate("MainWindow", "Slowmotion"))
        self.label.setText(_translate("MainWindow", "Time(ms):"))
        self.stop_slow_btn.setText(_translate("MainWindow", "Stop"))
        self.start_slow_btn.setText(_translate("MainWindow", "Start"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
