# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from get_frame_camera import *
from PyQt5.QtGui import QImage
import cv2, imutils
import time


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1605, 788)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(1140, 10, 401, 101))
        self.groupBox_3.setObjectName("groupBox_3")
        self.camera_btn = QtWidgets.QPushButton(self.groupBox_3)
        self.camera_btn.setGeometry(QtCore.QRect(10, 30, 171, 61))
        self.camera_btn.setObjectName("camera_btn")
        self.record_btn = QtWidgets.QPushButton(self.groupBox_3)
        self.record_btn.setGeometry(QtCore.QRect(240, 30, 151, 61))
        self.record_btn.setObjectName("record_btn")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(1140, 120, 451, 391))
        self.groupBox_2.setObjectName("groupBox_2")
        self.layoutWidget = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget.setGeometry(QtCore.QRect(220, 80, 213, 231))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Impact_btn = QtWidgets.QPushButton(self.layoutWidget)
        self.Impact_btn.setObjectName("Impact_btn")
        self.verticalLayout_2.addWidget(self.Impact_btn)
        self.Mid_downswing_btn = QtWidgets.QPushButton(self.layoutWidget)
        self.Mid_downswing_btn.setObjectName("Mid_downswing_btn")
        self.verticalLayout_2.addWidget(self.Mid_downswing_btn)
        self.Mid_follow_through_btn = QtWidgets.QPushButton(self.layoutWidget)
        self.Mid_follow_through_btn.setObjectName("Mid_follow_through_btn")
        self.verticalLayout_2.addWidget(self.Mid_follow_through_btn)
        self.Finish_btn = QtWidgets.QPushButton(self.layoutWidget)
        self.Finish_btn.setObjectName("Finish_btn")
        self.verticalLayout_2.addWidget(self.Finish_btn)
        self.layoutWidget1 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget1.setGeometry(QtCore.QRect(20, 80, 191, 231))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Adress_btn = QtWidgets.QPushButton(self.layoutWidget1)
        self.Adress_btn.setObjectName("Adress_btn")
        self.verticalLayout.addWidget(self.Adress_btn)
        self.Toe_up_btn = QtWidgets.QPushButton(self.layoutWidget1)
        self.Toe_up_btn.setObjectName("Toe_up_btn")
        self.verticalLayout.addWidget(self.Toe_up_btn)
        self.Mid_backswing_btn = QtWidgets.QPushButton(self.layoutWidget1)
        self.Mid_backswing_btn.setObjectName("Mid_backswing_btn")
        self.verticalLayout.addWidget(self.Mid_backswing_btn)
        self.Top_btn = QtWidgets.QPushButton(self.layoutWidget1)
        self.Top_btn.setObjectName("Top_btn")
        self.verticalLayout.addWidget(self.Top_btn)
        self.Frame_radioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.Frame_radioButton.setGeometry(QtCore.QRect(40, 30, 110, 24))
        self.Frame_radioButton.setObjectName("Frame_radioButton")
        self.Frames_radioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.Frames_radioButton.setGeometry(QtCore.QRect(160, 30, 110, 24))
        self.Frames_radioButton.setObjectName("Frames_radioButton")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_2)
        self.checkBox.setGeometry(QtCore.QRect(290, 30, 91, 24))
        self.checkBox.setObjectName("checkBox")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(1110, 10, 16, 721))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.Im_show = QtWidgets.QLabel(self.centralwidget)
        self.Im_show.setGeometry(QtCore.QRect(30, 10, 1061, 681))
        self.Im_show.setText("")
        self.Im_show.setObjectName("Im_show")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(1140, 530, 451, 211))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(20, 30, 71, 21))
        self.label.setTextFormat(QtCore.Qt.MarkdownText)
        self.label.setObjectName("label")
        self.slowmotion_btn = QtWidgets.QPushButton(self.groupBox)
        self.slowmotion_btn.setGeometry(QtCore.QRect(20, 130, 171, 61))
        self.slowmotion_btn.setObjectName("slowmotion_btn")
        self.time_slow = QtWidgets.QLineEdit(self.groupBox)
        self.time_slow.setGeometry(QtCore.QRect(90, 30, 113, 26))
        self.time_slow.setObjectName("time_slow")
        self.slowmotion_mode1 = QtWidgets.QRadioButton(self.groupBox)
        self.slowmotion_mode1.setGeometry(QtCore.QRect(30, 80, 110, 24))
        self.slowmotion_mode1.setObjectName("slowmotion_mode1")
        self.slowmotion_mode2 = QtWidgets.QRadioButton(self.groupBox)
        self.slowmotion_mode2.setGeometry(QtCore.QRect(170, 80, 110, 24))
        self.slowmotion_mode2.setObjectName("slowmotion_mode2")
        self.slowmotion_mode3 = QtWidgets.QRadioButton(self.groupBox)
        self.slowmotion_mode3.setGeometry(QtCore.QRect(310, 80, 110, 24))
        self.slowmotion_mode3.setObjectName("slowmotion_mode3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1605, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        self.camera_btn.clicked.connect(self.camera_connect)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def camera_connect(self):
        cameraCnt, cameraList = enumCameras()
        if cameraCnt is None:
            return -1

        # 显示相机信息
        # print camera info
        for index in range(0, cameraCnt):
            camera = cameraList[index]
            print("\nCamera Id = " + str(index))
            print("Key           = " + str(camera.getKey(camera)))
            print("vendor name   = " + str(camera.getVendorName(camera)))
            print("Model  name   = " + str(camera.getModelName(camera)))
            print("Serial number = " + str(camera.getSerialNumber(camera)))

        camera = cameraList[0]

        # 打开相机
        # open camera
        nRet = openCamera(camera)
        if (nRet != 0):
            print("openCamera fail.")
            return -1
        self.camera_btn.setText('Close Camera')
        # 创建流对象
        # create stream source object
        streamSourceInfo = GENICAM_StreamSourceInfo()
        streamSourceInfo.channelId = 0
        streamSourceInfo.pCamera = pointer(camera)

        streamSource = pointer(GENICAM_StreamSource())
        nRet = GENICAM_createStreamSource(pointer(streamSourceInfo), byref(streamSource))
        if (nRet != 0):
            print("create StreamSource fail!")
            return -1

        # 通用属性设置:设置触发模式为off --根据属性类型，直接构造属性节点。如触发模式是 enumNode，构造enumNode节点
        # create corresponding property node according to the value type of property, here is enumNode
        # 自由拉流：TriggerMode 需为 off
        # set trigger mode to Off for continuously grabbing
        trigModeEnumNode = pointer(GENICAM_EnumNode())
        trigModeEnumNodeInfo = GENICAM_EnumNodeInfo()
        trigModeEnumNodeInfo.pCamera = pointer(camera)
        trigModeEnumNodeInfo.attrName = b"TriggerMode"
        nRet = GENICAM_createEnumNode(byref(trigModeEnumNodeInfo), byref(trigModeEnumNode))
        if (nRet != 0):
            print("create TriggerMode Node fail!")
            # 释放相关资源
            # release node resource before return
            streamSource.contents.release(streamSource)
            return -1

        nRet = trigModeEnumNode.contents.setValueBySymbol(trigModeEnumNode, b"Off")
        if (nRet != 0):
            print("set TriggerMode value [Off] fail!")
            # 释放相关资源
            # release node resource before return
            trigModeEnumNode.contents.release(trigModeEnumNode)
            streamSource.contents.release(streamSource)
            return -1

        # 需要释放Node资源
        # release node resource at the end of use
        trigModeEnumNode.contents.release(trigModeEnumNode)

        # 开始拉流
        # start grabbing
        nRet = streamSource.contents.startGrabbing(streamSource, c_ulonglong(0), c_int(GENICAM_EGrabStrategy.grabStrartegySequential))
        if (nRet != 0):
            print("startGrabbing fail!")
            # 释放相关资源
            # release stream source object before return
            streamSource.contents.release(streamSource)
            return -1

        isGrab = True
        count = 0
        start_time = time.time()
        fps = 0
        while isGrab:
            # 主动取图
            # get one frame
            frame = pointer(GENICAM_Frame())
            nRet = streamSource.contents.getFrame(streamSource, byref(frame), c_uint(1000))
            if (nRet != 0):
                print("getFrame fail! Timeout:[1000]ms")
                # 释放相关资源
                # release stream source object before return
                streamSource.contents.release(streamSource)
                return -1
            else:
                print("getFrame success BlockId = [" + str(
                    frame.contents.getBlockId(frame)) + "], get frame time: " + str(
                    datetime.datetime.now()))

            nRet = frame.contents.valid(frame)
            if (nRet != 0):
                print("frame is invalid!")
                # 释放驱动图像缓存资源
                # release frame resource before return
                frame.contents.release(frame)
                # 释放相关资源
                # release stream source object before return
                streamSource.contents.release(streamSource)
                return -1

                # 给转码所需的参数赋值
            # fill conversion parameter
            imageParams = IMGCNV_SOpenParam()
            imageParams.dataSize = frame.contents.getImageSize(frame)
            imageParams.height = frame.contents.getImageHeight(frame)
            imageParams.width = frame.contents.getImageWidth(frame)
            imageParams.paddingX = frame.contents.getImagePaddingX(frame)
            imageParams.paddingY = frame.contents.getImagePaddingY(frame)
            imageParams.pixelForamt = frame.contents.getImagePixelFormat(frame)

            # 将裸数据图像拷出
            # copy image data out from frame
            imageBuff = frame.contents.getImage(frame)
            userBuff = c_buffer(b'\0', imageParams.dataSize)
            memmove(userBuff, c_char_p(imageBuff), imageParams.dataSize)

            # 释放驱动图像缓存
            # release frame resource at the end of use
            frame.contents.release(frame)

            # 如果图像格式是 Mono8 直接使用
            # no format conversion required for Mono8
            if imageParams.pixelForamt == EPixelType.gvspPixelMono8:
                grayByteArray = bytearray(userBuff)
                cvImage = numpy.array(grayByteArray).reshape(imageParams.height, imageParams.width)
            else:
                # 转码 => BGR24
                # convert to BGR24
                rgbSize = c_int()
                rgbBuff = c_buffer(b'\0', imageParams.height * imageParams.width * 3)

                nRet = IMGCNV_ConvertToBGR24(cast(userBuff, c_void_p), \
                                             byref(imageParams), \
                                             cast(rgbBuff, c_void_p), \
                                             byref(rgbSize))

                colorByteArray = bytearray(rgbBuff)
                count += 1
                if count == 20:
                    fps = 20 / (time.time() - start_time)
                    count = 0
                    start_time = time.time()

                cvImage = numpy.array(colorByteArray).reshape(imageParams.height, imageParams.width, 3)
                cvImage = cv2.putText(cvImage, 'fps:'+str(int(fps)), (20,50), cv2.FONT_HERSHEY_SIMPLEX, 1,(0,255,0), 1, cv2.LINE_AA)
            # --- end if ---

            cv2.imshow('myWindow', cvImage)
            gc.collect()

            if (cv2.waitKey(1) >= 0):
                isGrab = False
                break


    def setPhoto(self, image):
        """ This function will take image input and resize it
            only for display purpose and convert it to QImage
            to set at the label.
        """
        self.tmp = image
        image = imutils.resize(image, height=640)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.Im_show.setPixmap(QtGui.QPixmap.fromImage(image))



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Record"))
        self.camera_btn.setText(_translate("MainWindow", "Open Camera"))
        self.record_btn.setText(_translate("MainWindow", "Start Record"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Detect Event"))
        self.Impact_btn.setText(_translate("MainWindow", "Impact"))
        self.Mid_downswing_btn.setText(_translate("MainWindow", "Mid-downswing"))
        self.Mid_follow_through_btn.setText(_translate("MainWindow", "Mid-follow-through"))
        self.Finish_btn.setText(_translate("MainWindow", "Finish"))
        self.Adress_btn.setText(_translate("MainWindow", "Adress"))
        self.Toe_up_btn.setText(_translate("MainWindow", "Toe-up"))
        self.Mid_backswing_btn.setText(_translate("MainWindow", "Mid-backswing"))
        self.Top_btn.setText(_translate("MainWindow", "Top"))
        self.Frame_radioButton.setText(_translate("MainWindow", "Frame"))
        self.Frames_radioButton.setText(_translate("MainWindow", "Frames"))
        self.checkBox.setText(_translate("MainWindow", "skeleton"))
        self.groupBox.setTitle(_translate("MainWindow", "Slowmotion"))
        self.label.setText(_translate("MainWindow", "Time(ms):"))
        self.slowmotion_btn.setText(_translate("MainWindow", "Start"))
        self.slowmotion_mode1.setText(_translate("MainWindow", "x1/2"))
        self.slowmotion_mode2.setText(_translate("MainWindow", "x1/4"))
        self.slowmotion_mode3.setText(_translate("MainWindow", "x1/8"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
